# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?


//profile
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { createPackage } from '../api/packageService';
import { IoArrowBack } from 'react-icons/io5';

interface PackageModel {
  photographerId: number;
  packageName: string;
  description: string;
  price: number;
  duration: number;
}

const CreatePackage: React.FC = () => {
  const navigate = useNavigate();
  const [isLoading, setIsLoading] = useState(false);
  const [formData, setFormData] = useState<PackageModel>({
    photographerId: 0, // Bạn có thể lấy ID này từ context hoặc localStorage
    packageName: '',
    description: '',
    price: 0,
    duration: 0
  });
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<boolean>(false);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    
    // Xử lý riêng cho các trường số
    if (name === 'price' || name === 'duration') {
      setFormData({
        ...formData,
        [name]: value ? parseFloat(value) : 0
      });
    } else {
      setFormData({
        ...formData,
        [name]: value
      });
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    setError(null);
    
    try {
      const response = await createPackage(formData);
      
      if (response.success) {
        setSuccess(true);
        // Reset form sau khi tạo thành công
        setFormData({
          photographerId: 0,
          packageName: '',
          description: '',
          price: 0,
          duration: 0
        });
        
        // Chuyển hướng sau 2 giây
        setTimeout(() => {
          navigate('/packages'); // Điều hướng đến trang danh sách gói
        }, 2000);
      } else {
        setError(response.message || 'Có lỗi xảy ra khi tạo gói');
      }
    } catch (err) {
      setError('Lỗi hệ thống, vui lòng thử lại sau');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="container mx-auto p-4 max-w-2xl">
      <div className="flex items-center mb-6">
        <button 
          onClick={() => navigate(-1)} 
          className="flex items-center text-gray-600 hover:text-gray-800"
        >
          <IoArrowBack className="mr-2" />
          <span>Quay lại</span>
        </button>
        <h1 className="text-2xl font-bold text-center flex-1 pr-10">Tạo gói chụp ảnh mới</h1>
      </div>

      {success && (
        <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4">
          Tạo gói chụp ảnh thành công! Đang chuyển hướng...
        </div>
      )}

      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}

      <form onSubmit={handleSubmit} className="bg-white shadow-md rounded-lg p-6">
        <div className="mb-4">
          <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="packageName">
            Tên gói chụp
          </label>
          <input
            type="text"
            id="packageName"
            name="packageName"
            value={formData.packageName}
            onChange={handleChange}
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            required
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="description">
            Mô tả
          </label>
          <textarea
            id="description"
            name="description"
            value={formData.description}
            onChange={handleChange}
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline h-32"
            required
          />
        </div>

        <div className="mb-4 flex gap-4">
          <div className="w-1/2">
            <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="price">
              Giá (VNĐ)
            </label>
            <input
              type="number"
              id="price"
              name="price"
              value={formData.price || ''}
              onChange={handleChange}
              className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              min="0"
              required
            />
          </div>

          <div className="w-1/2">
            <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="duration">
              Thời lượng (phút)
            </label>
            <input
              type="number"
              id="duration"
              name="duration"
              value={formData.duration || ''}
              onChange={handleChange}
              className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              min="0"
              required
            />
          </div>
        </div>

        <div className="flex items-center justify-center mt-6">
          <button
            type="submit"
            disabled={isLoading}
            className={`bg-[#93DDD4] hover:bg-[#7ACCC2] text-black font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline w-full ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`}
          >
            {isLoading ? 'Đang xử lý...' : 'Tạo gói chụp ảnh'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default CreatePackage;